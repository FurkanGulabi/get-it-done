generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  surname            String?
  email              String               @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               Role                 @default(USER) // Role-based access control
  accounts           Account[]
  sessions           Session[]
  todos              Todo[]
  passwordResetToken PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_reset_tokens")
}

model Todo {
  id          String     @id @default(cuid())
  title       String
  description String
  isCompleted Boolean    @default(false)
  status      TodoStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  endDate     String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isCompleted])
  @@index([status, priority]) // Composite index
  @@map("todos")
}

enum TodoStatus {
  PENDING
  ONGOING
  POSTPONED
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  USER
  ADMIN
}
